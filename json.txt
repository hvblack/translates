текстовый формат обмена данными, основанный на JavaScript.
 текстовый формат представления данных 

Применяется в веб-приложениях как для обмена данными между браузером и сервером (AJAX), так и между серверами (программные HTTP-сопряжения). 

JSON-текст представляет собой (в закодированном виде) одну из двух структур:

    Набор пар ключ: значение. В различных языках это реализовано как запись, структура, словарь, хеш-таблица, список с ключом или ассоциативный массив. Ключом может быть только строка (регистрозависимость не регулируется стандартом, это остаётся на усмотрение программного обеспечения. Как правило, регистр учитывается программами — имена с буквами в разных регистрах считаются разными, например[5]), значением — любая форма. Повторяющиеся имена ключей допустимы, но не рекомендуются стандартом; обработка таких ситуаций происходит на усмотрение программного обеспечения, возможные варианты — учитывать только первый такой ключ, учитывать только последний такой ключ, генерировать ошибку.
    Упорядоченный набор значений. Во многих языках это реализовано как массив, вектор, список или последовательность.

Ключ — ВСЕГДА строка, и мы в любом случае берём его в кавычки.

Ключи могут быть записаны в любом порядке, ведь, JSON-объект — это неупорядоченное множество пар «ключ:значение».

В качестве значений в JSON могут быть использованы:
    запись — это неупорядоченное множество пар ключ:значение, заключённое в фигурные скобки «{ }». Ключ описывается строкой, между ним и значением стоит символ «:». Пары ключ-значение отделяются друг от друга запятыми.
    массив (одномерный) — это упорядоченное множество значений. Массив заключается в квадратные скобки «[ ]». Значения разделяются запятыми. Массив может быть пустым, то есть не содержать ни одного значения. Значения в пределах одного массива могут иметь разный тип.
    число (целое или вещественное).
    литералы true (логическое значение «истина»), false (логическое значение «ложь») и null.
    строка — это упорядоченное множество из нуля или более символов юникода, заключённое в двойные кавычки.


JSON должен быть well formed, то есть синтаксически правильный.

Правила well formed JSON:

    Данные написаны в виде пар «ключ:значение»
    Данные разделены запятыми
    Объект находится внутри фигурных скобок { }
    Массив — внутри квадратных [ ]


Второе отличие заключается в том, что значение ключа в JSON можно задать только в одном из следующих форматов: string (строкой), number (числом), object (объектом), array (массивом), boolean (логическим значением true или false) или null (специальным значением JavaScript). Например, значение ключа в JSON не может быть функцией или датой (объектом типа Date).

JSON Schema — один из языков описания структуры JSON-документа. Использует синтаксис JSON. Базируется на концепциях XML Schema, RelaxNG, Kwalify. JSON Schema — самоописательный язык: при его использовании для обработки данных и описания их допустимости могут использоваться одни и те же инструменты сериализации/десериализации. 

Примечание: Преобразование строки в родной объект называется десериализацией (преобразование из последовательной формы в параллельную), в то время как преобразовании родного объекта в строку, таким образом ,чтобы он мог быть передан через сеть, называется сериализацией(преобразование в последовательную форму).

JSON поддерживает следующие типы данных:

    Объекты { ... }
    Массивы [ ... ]
    Примитивы:
        строки,
        числа,
        логические значения true/false,
        null.


Формат представления данных JSON имеет следующие преимущества:

    удобные и быстрые в работе методы, предназначенные для конвертации (парсинга) строки JSON в объект JavaScript и обратно;
    понятная и простая структура данных;
    очень маленький размер по сравнению с другими форматами данных (например XML). Это связано с тем, что формат JSON содержит минимальное возможное форматирование, т.е. при его написании используется всего несколько специальных знаков. Это очень важное преимущество, т.к. данные представленные в формате JSON будут быстрее загружаться, чем, если бы они были бы представлены в других форматах.



Основные сценарии использования JSON

Руководство JSON
Изучите новые функции для работы с документами JSON, хранящимися в базе данных.
Сценарии использования JSON

1. Создание объекта JSON из пользовательских данных
JSON идеально подходит для хранения временных данных. Например, временные данные могут быть данными, созданными пользователем, такими как отправленная форма на веб-сайте. JSON также можно использовать в качестве формата данных для любого языка программирования, чтобы обеспечить высокий уровень взаимодействия.

2. Перенос данных между системами
В базе данных веб-сайта есть почтовый адрес заказчика, но его необходимо подтвердить с помощью API, чтобы убедиться, что он действителен. Отправьте адресные данные в формате JSON в API-сервис проверки адресов.

3. Конфигурация данных для приложений
При разработке приложений каждому приложению необходимы учетные данные для подключения к базе данных, а также путь к файлу журнала. Учетные данные и путь к файлу могут быть указаны в файле JSON для чтения и доступа.

4. Упрощение сложных моделей данных
JSON упрощает сложные документы и выделяет компоненты, которые были определены как значимые, путем преобразования процесса извлечения данных в предсказуемый и удобочитаемый файл JSON.

    Не занимает много места, является компактным в написании и быстро компилируется.

    Создание текстового содержимого понятно человеку, просто в реализации, а чтение со стороны среды разработки не вызывает никаких проблем. Чтение может осуществляться и человеком, поскольку ничего сложного в представлении данных нет.

    Структура преобразуется для чтения на любых языках программирования.

    Практически все языки имеют соответствующие библиотеки или другие инструменты для чтения данных JSON.



https://developer.mozilla.org/ru/docs/Learn/JavaScript/Objects/JSON
https://habr.com/ru/post/554274/
https://www.json.org/json-ru.html
https://itchief.ru/javascript/json
https://timeweb.com/ru/community/articles/format-json
https://tproger.ru/articles/chto-takoe-json-vvedenie/