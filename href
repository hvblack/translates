Опыт работы с Python библиотеками для DL (PyTorch / TensorFlow), ML (Scikit-learn / XGBoost / CatBoost) и анализа данных (Pandas / NumPy / SciPy).
Принципы рекомендательных систем (близость пользователей)


https://www.msn.com/ru-ru/news/politics/the-observer-%D1%83%D0%B7%D0%BD%D0%B0%D0%BB%D0%B0-%D0%BE%D0%B1-%D0%BE%D0%BF%D0%B0%D1%81%D0%B5%D0%BD%D0%B8%D1%8F%D1%85-%D0%B2%D0%BB%D0%B0%D1%81%D1%82%D0%B5%D0%B9-%D0%B1%D1%80%D0%B8%D1%82%D0%B0%D0%BD%D0%B8%D0%B8-%D0%BE-%D0%BD%D0%B0%D1%81%D0%B8%D0%BB%D0%B8%D0%B8-%D0%B0%D0%BD%D1%82%D0%B8%D0%B2%D0%B0%D0%BA%D1%81%D0%B5%D1%80%D0%BE%D0%B2/ar-AASPxdx?ocid=msedgntp


https://www.msn.com/ru-ru/news/other/%d1%80%d0%b5%d1%81%d1%82%d0%be%d1%80%d0%b0%d0%bd%d0%bd%d1%8b%d0%b9-%d0%b1%d0%b8%d0%b7%d0%bd%d0%b5%d1%81-%d0%bf%d0%b5%d1%82%d0%b5%d1%80%d0%b1%d1%83%d1%80%d0%b3%d0%b0-%d0%bf%d0%be%d0%b4%d0%b4%d0%b5%d1%80%d0%b6%d0%b0%d0%bb-%d0%be%d1%82%d1%81%d1%80%d0%be%d1%87%d0%ba%d1%83-%d0%b2%d0%b2%d0%b5%d0%b4%d0%b5%d0%bd%d0%b8%d1%8f-qr-%d0%ba%d0%be%d0%b4%d0%be%d0%b2/ar-AARbFU4?ocid=msedgntp

Python: ORM https://habr.com/ru/post/470285/
https://coderlessons.com/tutorials/bazy-dannykh/sqlalchemy/sqlalchemy-kratkoe-rukovodstvo
https://habr.co

https://lectureswww.readthedocs.io/6.www.sync/2.codding/9.databases/2.sqlalchemy/3.orm.html

###################################################################################################################################################
######################################################### Импортируем модули ######################################################################
###################################################################################################################################################
from airflow import DAG
from airflow.operators.bash import BashOperator
from airflow.utils.task_group import TaskGroup
from datetime import datetime, timedelta
import os
import sys
import pytz
#sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
os.chdir('/home/mint/')
#import testair1
#import testair2
    
###################################################################################################################################################
######################################################### Создаем DAG #############################################################################
###################################################################################################################################################
yesterday = datetime.now(pytz.timezone("Asia/Vladivostok")).date() - timedelta(days=1)
yesterday = datetime.strftime(yesterday, '%Y-%m-%d')

default_args = {
    'owner': 'Khramenkov.VV@dns-shop.ru',
    'email': ['Khramenkov.VV@dns-shop.ru'],
    'email_on_failure': True,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=2)
}

with DAG('frcst_day2',
         start_date=datetime(2021, 12, 15, 14, 34, 0),
         schedule_interval=timedelta(minutes=10),
         default_args=default_args,
         description='Тестовая дичь',
         tags=['frcst', 'kafka']) as dag:

    testair1 = BashOperator(
        task_id='task_testair1',
        bash_command='testair1.py',
        dag=dag
    )

    testair2 = BashOperator(
        task_id='task_testair2',
        bash_command='testair2.py',
        dag=dag
    )
    
    testair1 >> testair2



# REST
https://itvdn.com/ru/blog/article/rest-api-18
https://tproger.ru/articles/osnovy-rest-teorija-i-praktika/
https://restapitutorial.ru/lessons/whatisrest.html
https://www.youtube.com/watch?time_continue=2428&v=qbLc5a9jdXo&feature=emb_logo
https://www.nylas.com/blog/use-python-requests-module-rest-apis/
